services:
  db:
    image: postgres:14
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_HOST_AUTH_METHOD=trust
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      postgres -c 'shared_preload_libraries=pg_stat_statements' -c 'pg_stat_statements.track=all'
      && psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "CREATE SCHEMA IF NOT EXISTS telegram;"
      && psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "CREATE SCHEMA IF NOT EXISTS app;"
      && psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "CREATE SCHEMA IF NOT EXISTS auth;"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - TZ=Europe/Moscow
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '8000:8000'
    command: >
      uvicorn src.main:app --host 0.0.0.0 --port 8000

  order-management:
    build:
      context: ./order-management
      dockerfile: Dockerfile
      target: build
    volumes:
      - order_management_build:/app/build

  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - order_management_build:/usr/share/nginx/html
    depends_on:
      order-management:
        condition: service_completed_successfully
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost']
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s
    command: ['/bin/sh', '-c', "sleep 10 && nginx -g 'daemon off;'"]

volumes:
  postgres_data:
  order_management_build:
